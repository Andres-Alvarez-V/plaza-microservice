name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    env:
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}      
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Notify on failure
        if: ${{ failure() }}
        uses: julb/action-post-googlechat-message@v1
        with: 
          gchat_webhook_url: ${{ secrets.WEBHOOK_URL_GOOGLE }}
          message: "El pipeline de CI/CD en el microservicio de Plazoleta falló en sonarcloud. Revisa los detalles en ${{ github.repository }}/runs/${{ github.run_id }}"


  build-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: "camiloalvarezpragma/plaza-microservice:latest,camiloalvarezpragma/plaza-microservice:${{ github.sha }}"

      - name: Deploy to Elastic Beanstalk
        run: |
          # Instala las herramientas de AWS CLI si no están disponibles
          pip install awscli    
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1 

          # Crear una nueva versión de la aplicación en Elastic Beanstalk
          eb create-application-version --application-name plazoleta --version-label ${{ github.sha }} --source-bundle Type=S3,S3Bucket=elasticbeanstalk-us-east-1-464010825664,S3Key=1691678575205-Dockerrun.aws.json

          # Implementar la nueva versión en el entorno
          eb deploy Plazoleta-env-1

      - name: Notify on failure
        if: ${{ failure() }}
        uses: julb/action-post-googlechat-message@v1
        with: 
          gchat_webhook_url: ${{ secrets.WEBHOOK_URL_GOOGLE }}
          message: "El pipeline de CI/CD en el microservicio de Plazoleta falló. Revisa los detalles en ${{ github.repository }}/actions/runs/${{ github.run_id }}"


